{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Sympiler is a domain-specific code generator that optimizes sparse matrix computations by decoupling the symbolic analysis phase from the numerical manipulation stage in sparse codes. Sympiler then generates specialized code based on the symbolic information. The following figure shows how the input code to Sympiler is transformed internally to an optimized code. Why Sympiler? Sympiler is: Fast: . Scalable: . Citing us If you are using Sympiler, please cite Sympiler papers or support us by putting a star in the Sympiler GitHub repository. @inproceedings{Cheshmi:2017:STS:3126908.3126936, author = {Cheshmi, Kazem and Kamil, Shoaib and Strout, Michelle Mills and Dehnavi, Maryam Mehri}, title = {Sympiler: Transforming Sparse Matrix Codes by Decoupling Symbolic Analysis}, booktitle = {Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis}, series = {SC '17}, year = {2017}, isbn = {978-1-4503-5114-0}, location = {Denver, Colorado}, pages = {13:1--13:13}, articleno = {13}, numpages = {13}, url = {http://doi.acm.org/10.1145/3126908.3126936}, doi = {10.1145/3126908.3126936}, acmid = {3126936}, publisher = {ACM}, address = {New York, NY, USA}, } ```@inproceedings{Cheshmi:2018:PIT:3291656.3291739, author = {Cheshmi, Kazem and Kamil, Shoaib and Strout, Michelle Mills and Dehnavi, Maryam Mehri}, title = {ParSy: Inspection and Transformation of Sparse Matrix Computations for Parallelism}, booktitle = {Proceedings of the International Conference for High Performance Computing, Networking, Storage, and Analysis}, series = {SC '18}, year = {2018}, location = {Dallas, Texas}, pages = {62:1--62:15}, articleno = {62}, numpages = {15}, url = { http://dl.acm.org/citation.cfm?id=3291656.3291739 }, acmid = {3291739}, publisher = {IEEE Press}, address = {Piscataway, NJ, USA}, } ``` We are keen to hear your success stories with Sympiler. Please contact us . Credits The people have been involved in the development of NASOQ: Kazem Cheshmi Shoaib Kamil Michelle Mills Strout Maryam Mehri Dehnavi","title":"Overview"},{"location":"#why-sympiler","text":"Sympiler is: Fast: . Scalable: .","title":"Why Sympiler?"},{"location":"#citing-us","text":"If you are using Sympiler, please cite Sympiler papers or support us by putting a star in the Sympiler GitHub repository. @inproceedings{Cheshmi:2017:STS:3126908.3126936, author = {Cheshmi, Kazem and Kamil, Shoaib and Strout, Michelle Mills and Dehnavi, Maryam Mehri}, title = {Sympiler: Transforming Sparse Matrix Codes by Decoupling Symbolic Analysis}, booktitle = {Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis}, series = {SC '17}, year = {2017}, isbn = {978-1-4503-5114-0}, location = {Denver, Colorado}, pages = {13:1--13:13}, articleno = {13}, numpages = {13}, url = {http://doi.acm.org/10.1145/3126908.3126936}, doi = {10.1145/3126908.3126936}, acmid = {3126936}, publisher = {ACM}, address = {New York, NY, USA}, } ```@inproceedings{Cheshmi:2018:PIT:3291656.3291739, author = {Cheshmi, Kazem and Kamil, Shoaib and Strout, Michelle Mills and Dehnavi, Maryam Mehri}, title = {ParSy: Inspection and Transformation of Sparse Matrix Computations for Parallelism}, booktitle = {Proceedings of the International Conference for High Performance Computing, Networking, Storage, and Analysis}, series = {SC '18}, year = {2018}, location = {Dallas, Texas}, pages = {62:1--62:15}, articleno = {62}, numpages = {15}, url = { http://dl.acm.org/citation.cfm?id=3291656.3291739 }, acmid = {3291739}, publisher = {IEEE Press}, address = {Piscataway, NJ, USA}, } ``` We are keen to hear your success stories with Sympiler. Please contact us .","title":"Citing us"},{"location":"#credits","text":"The people have been involved in the development of NASOQ: Kazem Cheshmi Shoaib Kamil Michelle Mills Strout Maryam Mehri Dehnavi","title":"Credits"},{"location":"getting-started-sympiler/","text":"Here we explain how you can install NASOQ and use its C++ API to solve your QP problems. Pre-requisites CMake C++ compiler (gcc, icc, or clang) OpenMP (optional) : OpenMP is an optional dependency but without OpenMP, NASOQ runs sequentially. METIS (Optional) : METIS dependency is already handled by CMake. a BLAS Library (MKL or OpenBLAS) Installation If the installation paths of these libraries are in the system path, CMake should be able to handle dependencies. If not, you should set CMake variables as shown below: git clone https://github.com/sympiler/sympiler.git cd sympiler mkdir build cd build cmake -DCMAKE_BUILD_TYPE = Release .. make Sympiler APIs and interfaces Sympiler code generator is explained here . C++ API and Eigen interface is here . Sympyler (the sympiler python interface) is presented here .","title":"Getting Started with Sympiler"},{"location":"getting-started-sympiler/#pre-requisites","text":"CMake C++ compiler (gcc, icc, or clang) OpenMP (optional) : OpenMP is an optional dependency but without OpenMP, NASOQ runs sequentially. METIS (Optional) : METIS dependency is already handled by CMake. a BLAS Library (MKL or OpenBLAS)","title":"Pre-requisites"},{"location":"getting-started-sympiler/#installation","text":"If the installation paths of these libraries are in the system path, CMake should be able to handle dependencies. If not, you should set CMake variables as shown below: git clone https://github.com/sympiler/sympiler.git cd sympiler mkdir build cd build cmake -DCMAKE_BUILD_TYPE = Release .. make","title":"Installation"},{"location":"getting-started-sympiler/#sympiler-apis-and-interfaces","text":"Sympiler code generator is explained here . C++ API and Eigen interface is here . Sympyler (the sympiler python interface) is presented here .","title":"Sympiler APIs and interfaces"},{"location":"lbc/","text":"Load balance level coarsening (LBC) How to use LBC? Sympiler library and sympyler provide C++ and python interfaces for using LBC.","title":"LBC DAG Partitioning"},{"location":"lbc/#load-balance-level-coarsening-lbc","text":"","title":"Load balance level coarsening (LBC)"},{"location":"lbc/#how-to-use-lbc","text":"Sympiler library and sympyler provide C++ and python interfaces for using LBC.","title":"How to use LBC?"},{"location":"sympiler-codegen/","text":"Sympiler code generator Types Supported built-in kernels/routines Supported architectures","title":"Sympiler Code Generator"},{"location":"sympiler-codegen/#sympiler-code-generator","text":"","title":"Sympiler code generator"},{"location":"sympiler-codegen/#types","text":"","title":"Types"},{"location":"sympiler-codegen/#supported-built-in-kernelsroutines","text":"","title":"Supported built-in kernels/routines"},{"location":"sympiler-codegen/#supported-architectures","text":"","title":"Supported architectures"},{"location":"sympiler-lib/","text":"The sympiler library is built from the sympiler generated code and has a collection of inspector/executor routines for wide range of sparse linear algebra kernels. General inspector/executor scheme Supported routines Here we explain both C++ and the eigen interfaces of the sympiler library. LBC DAG partitioning: Sparse lower triangular solver (SpTRSV): Description: solving linear system Lx=b Lx=b where L L is a sparse lower triangular matrix and x x and b b are dense vectors. Inspector: inputs, outputs, description Executor: inputs, outputs, description Sparse Cholesky factorization Description: Inspector: Executor: Sparse incomplete LU (SpILU0) Sparse incomplete Cholesky (SpIC0) Sparse matrix scaling Sparse matrix-vetor multiplication (SpMV)","title":"Sympiler Library"},{"location":"sympiler-lib/#general-inspectorexecutor-scheme","text":"","title":"General inspector/executor scheme"},{"location":"sympiler-lib/#supported-routines","text":"Here we explain both C++ and the eigen interfaces of the sympiler library.","title":"Supported routines"},{"location":"sympiler-lib/#lbc-dag-partitioning","text":"","title":"LBC DAG partitioning:"},{"location":"sympiler-lib/#sparse-lower-triangular-solver-sptrsv","text":"Description: solving linear system Lx=b Lx=b where L L is a sparse lower triangular matrix and x x and b b are dense vectors. Inspector: inputs, outputs, description Executor: inputs, outputs, description","title":"Sparse lower triangular solver (SpTRSV):"},{"location":"sympiler-lib/#sparse-cholesky-factorization","text":"Description: Inspector: Executor:","title":"Sparse Cholesky factorization"},{"location":"sympiler-lib/#sparse-incomplete-lu-spilu0","text":"","title":"Sparse incomplete LU (SpILU0)"},{"location":"sympiler-lib/#sparse-incomplete-cholesky-spic0","text":"","title":"Sparse incomplete Cholesky (SpIC0)"},{"location":"sympiler-lib/#sparse-matrix-scaling","text":"","title":"Sparse matrix scaling"},{"location":"sympiler-lib/#sparse-matrix-vetor-multiplication-spmv","text":"","title":"Sparse matrix-vetor multiplication (SpMV)"},{"location":"sympiler/","text":"Sympiler overview How to use sympiler? Sympiler can be used as a code generator or as a library. The DAG partitioning algorithm used inside sympiler can also be used independently. Sympiler also has a python interface, Sympyler that contains all routines in the sympiler library.","title":"Sympiler"},{"location":"sympiler/#sympiler-overview","text":"","title":"Sympiler overview"},{"location":"sympiler/#how-to-use-sympiler","text":"Sympiler can be used as a code generator or as a library. The DAG partitioning algorithm used inside sympiler can also be used independently. Sympiler also has a python interface, Sympyler that contains all routines in the sympiler library.","title":"How to use sympiler?"},{"location":"sympyler/","text":"The sympiler python interface, i.e. Sympyler contain all routines in the sympiler lib in a python package. Prerequisites Installation How to use Sympyler?","title":"Python Interface (Sympyler)"},{"location":"sympyler/#prerequisites","text":"","title":"Prerequisites"},{"location":"sympyler/#installation","text":"","title":"Installation"},{"location":"sympyler/#how-to-use-sympyler","text":"","title":"How to use Sympyler?"}]}